package analysis

import (
	"fmt"
	"strings"
	"time"
)

// GenerateMarkdownReport genera un reporte en formato Markdown.
func GenerateMarkdownReport(report *Report) string {
	var md strings.Builder

	// Header
	md.WriteString("# Passive Reconnaissance Report\n\n")

	if report.Target != "" {
		md.WriteString(fmt.Sprintf("**Target:** `%s`\n\n", report.Target))
	}

	md.WriteString(fmt.Sprintf("**Scan Date:** %s\n\n", report.ScanDate.Format("2006-01-02 15:04:05 MST")))
	md.WriteString(fmt.Sprintf("**Report Generated:** %s\n\n", report.ReportDate.Format("2006-01-02 15:04:05 MST")))

	if report.Duration != "" {
		md.WriteString(fmt.Sprintf("**Scan Duration:** %s\n\n", report.Duration))
	}

	md.WriteString("---\n\n")

	// Executive Summary
	md.WriteString("## Executive Summary\n\n")
	writeSummary(&md, &report.Summary)

	// Critical Insights
	if len(report.Insights) > 0 {
		md.WriteString("\n## Critical Insights\n\n")
		writeInsights(&md, report.Insights)
	}

	// Attack Surface
	if report.AttackSurface != nil {
		md.WriteString("\n## Attack Surface Analysis\n\n")
		writeAttackSurface(&md, report.AttackSurface)
	}

	// Technology Stack
	if report.TechStack != nil {
		md.WriteString("\n## Technology Stack\n\n")
		writeTechStack(&md, report.TechStack)
	}

	// Infrastructure
	if report.Infrastructure != nil {
		md.WriteString("\n## Infrastructure\n\n")
		writeInfrastructure(&md, report.Infrastructure)
	}

	// Asset Inventory
	if report.Assets != nil {
		md.WriteString("\n## Asset Inventory\n\n")
		writeAssetInventory(&md, report.Assets)
	}

	// Security Findings
	if report.Security != nil {
		md.WriteString("\n## Security Findings\n\n")
		writeSecurityFindings(&md, report.Security)
	}

	// Timeline
	if len(report.Timeline) > 0 {
		md.WriteString("\n## Timeline\n\n")
		writeTimeline(&md, report.Timeline)
	}

	// Footer
	md.WriteString("\n---\n\n")
	md.WriteString("*Report generated by [passiveRecon](https://passive-rec)*\n")

	return md.String()
}

func writeSummary(md *strings.Builder, summary *Summary) {
	md.WriteString(fmt.Sprintf("- **Total Artifacts:** %d\n", summary.TotalArtifacts))
	md.WriteString(fmt.Sprintf("- **Active Discoveries:** %d (%.1f%%)\n", summary.ActiveArtifacts, float64(summary.ActiveArtifacts)/float64(summary.TotalArtifacts)*100))
	md.WriteString(fmt.Sprintf("- **Passive Discoveries:** %d (%.1f%%)\n", summary.PassiveArtifacts, float64(summary.PassiveArtifacts)/float64(summary.TotalArtifacts)*100))
	md.WriteString(fmt.Sprintf("- **Tools Used:** %d\n\n", len(summary.ToolsUsed)))

	if len(summary.TopTools) > 0 {
		md.WriteString("### Top Tools by Discoveries\n\n")
		for i, tool := range summary.TopTools {
			md.WriteString(fmt.Sprintf("%d. **%s** - %d discoveries\n", i+1, tool.Name, tool.Count))
		}
		md.WriteString("\n")
	}

	if len(summary.ArtifactsByType) > 0 {
		md.WriteString("### Artifacts by Type\n\n")
		md.WriteString("| Type | Count |\n")
		md.WriteString("|------|-------|\n")
		for typ, count := range summary.ArtifactsByType {
			md.WriteString(fmt.Sprintf("| %s | %d |\n", typ, count))
		}
		md.WriteString("\n")
	}
}

func writeInsights(md *strings.Builder, insights []Insight) {
	// Agrupar por prioridad
	critical := []Insight{}
	warnings := []Insight{}
	recommendations := []Insight{}
	info := []Insight{}

	for _, insight := range insights {
		switch insight.Type {
		case "critical":
			critical = append(critical, insight)
		case "warning":
			warnings = append(warnings, insight)
		case "recommendation":
			recommendations = append(recommendations, insight)
		default:
			info = append(info, insight)
		}
	}

	if len(critical) > 0 {
		md.WriteString("### Critical Issues\n\n")
		for _, ins := range critical {
			md.WriteString(fmt.Sprintf("#### %s %s\n\n", "🚨", ins.Title))
			md.WriteString(fmt.Sprintf("%s\n\n", ins.Description))
			if ins.Action != "" {
				md.WriteString(fmt.Sprintf("**Action Required:** %s\n\n", ins.Action))
			}
		}
	}

	if len(warnings) > 0 {
		md.WriteString("### Warnings\n\n")
		for _, ins := range warnings {
			md.WriteString(fmt.Sprintf("#### %s %s\n\n", "⚠️", ins.Title))
			md.WriteString(fmt.Sprintf("%s\n\n", ins.Description))
			if ins.Action != "" {
				md.WriteString(fmt.Sprintf("**Recommended Action:** %s\n\n", ins.Action))
			}
		}
	}

	if len(recommendations) > 0 {
		md.WriteString("### Recommendations\n\n")
		for _, ins := range recommendations {
			md.WriteString(fmt.Sprintf("- **%s:** %s\n", ins.Title, ins.Description))
			if ins.Action != "" {
				md.WriteString(fmt.Sprintf("  - *Action:* %s\n", ins.Action))
			}
		}
		md.WriteString("\n")
	}
}

func writeAttackSurface(md *strings.Builder, surface *AttackSurface) {
	// Score y nivel
	levelEmoji := map[string]string{
		"minimal":  "🟢",
		"low":      "🟡",
		"medium":   "🟠",
		"high":     "🔴",
		"critical": "🔴🔴",
	}

	emoji := levelEmoji[surface.Level]
	md.WriteString(fmt.Sprintf("**Attack Surface Score:** %.1f/100 %s (%s)\n\n", surface.Score, emoji, strings.ToUpper(surface.Level)))

	md.WriteString(fmt.Sprintf("- **Total Endpoints:** %d\n", surface.TotalEndpoints))
	md.WriteString(fmt.Sprintf("- **Active Endpoints:** %d\n", surface.ActiveEndpoints))
	md.WriteString(fmt.Sprintf("- **Sensitive Endpoints:** %d\n", len(surface.SensitiveEndpoints)))
	md.WriteString(fmt.Sprintf("- **Exposed Files:** %d\n\n", len(surface.ExposedFiles)))

	// Sensitive Endpoints
	if len(surface.SensitiveEndpoints) > 0 {
		md.WriteString("### Sensitive Endpoints\n\n")
		md.WriteString("| Endpoint | Category | Risk | Status |\n")
		md.WriteString("|----------|----------|------|--------|\n")

		limit := 20
		if len(surface.SensitiveEndpoints) < limit {
			limit = len(surface.SensitiveEndpoints)
		}

		for i := 0; i < limit; i++ {
			ep := surface.SensitiveEndpoints[i]
			status := "Passive"
			if ep.Active {
				status = "Active"
				if ep.StatusCode > 0 {
					status = fmt.Sprintf("Active (%d)", ep.StatusCode)
				}
			}

			riskEmoji := getRiskEmoji(ep.Risk)
			md.WriteString(fmt.Sprintf("| `%s` | %s | %s %s | %s |\n", truncate(ep.URL, 60), ep.Category, riskEmoji, ep.Risk, status))
		}

		if len(surface.SensitiveEndpoints) > limit {
			md.WriteString(fmt.Sprintf("\n*... and %d more*\n", len(surface.SensitiveEndpoints)-limit))
		}
		md.WriteString("\n")
	}

	// Exposed Files
	if len(surface.ExposedFiles) > 0 {
		md.WriteString("### Exposed Files\n\n")
		md.WriteString("| File | Type | Risk | Status |\n")
		md.WriteString("|------|------|------|--------|\n")

		for _, file := range surface.ExposedFiles {
			status := "Passive"
			if file.Active {
				status = "Active"
				if file.StatusCode > 0 {
					status = fmt.Sprintf("Active (%d)", file.StatusCode)
				}
			}

			riskEmoji := getRiskEmoji(file.Risk)
			md.WriteString(fmt.Sprintf("| `%s` | %s | %s %s | %s |\n", truncate(file.Path, 60), file.Type, riskEmoji, file.Risk, status))
		}
		md.WriteString("\n")
	}

	// Risk Factors
	if len(surface.RiskFactors) > 0 {
		md.WriteString("### Risk Factors\n\n")
		for _, factor := range surface.RiskFactors {
			riskEmoji := getRiskEmoji(factor.Severity)
			md.WriteString(fmt.Sprintf("#### %s %s\n\n", riskEmoji, factor.Title))
			md.WriteString(fmt.Sprintf("%s\n\n", factor.Description))
			if factor.Remediation != "" {
				md.WriteString(fmt.Sprintf("**Remediation:** %s\n\n", factor.Remediation))
			}
		}
	}
}

func writeTechStack(md *strings.Builder, stack *TechStack) {
	md.WriteString(fmt.Sprintf("**Detection Confidence:** %s\n\n", strings.ToUpper(stack.Confidence)))

	// Deprecated (mostrar primero si hay)
	if len(stack.Deprecated) > 0 {
		md.WriteString("### ⚠️ Deprecated Technologies\n\n")
		md.WriteString("| Technology | Risk | Evidence |\n")
		md.WriteString("|------------|------|----------|\n")
		for _, tech := range stack.Deprecated {
			riskEmoji := getRiskEmoji(tech.Risk)
			evidence := strings.Join(tech.Evidence[:min(2, len(tech.Evidence))], ", ")
			md.WriteString(fmt.Sprintf("| %s | %s %s | %s |\n", tech.Name, riskEmoji, tech.Risk, truncate(evidence, 40)))
		}
		md.WriteString("\n")
	}

	// Frameworks
	if len(stack.Frameworks) > 0 {
		md.WriteString("### Frameworks\n\n")
		for _, tech := range stack.Frameworks {
			versionInfo := ""
			if tech.Version != "" {
				versionInfo = fmt.Sprintf(" (v%s)", tech.Version)
			}
			md.WriteString(fmt.Sprintf("- **%s**%s - Confidence: %s\n", tech.Name, versionInfo, tech.Confidence))
		}
		md.WriteString("\n")
	}

	// JavaScript Libraries
	if len(stack.JavaScript) > 0 {
		md.WriteString("### JavaScript Libraries\n\n")
		for _, tech := range stack.JavaScript {
			versionInfo := ""
			if tech.Version != "" {
				versionInfo = fmt.Sprintf(" (v%s)", tech.Version)
			}
			md.WriteString(fmt.Sprintf("- **%s**%s\n", tech.Name, versionInfo))
		}
		md.WriteString("\n")
	}

	// CSS Frameworks
	if len(stack.CSS) > 0 {
		md.WriteString("### CSS Frameworks\n\n")
		for _, tech := range stack.CSS {
			md.WriteString(fmt.Sprintf("- **%s**\n", tech.Name))
		}
		md.WriteString("\n")
	}

	// CMS
	if len(stack.CMS) > 0 {
		md.WriteString("### Content Management System\n\n")
		for _, tech := range stack.CMS {
			md.WriteString(fmt.Sprintf("- **%s** - Confidence: %s\n", tech.Name, tech.Confidence))
		}
		md.WriteString("\n")
	}

	// Servers
	if len(stack.Servers) > 0 {
		md.WriteString("### Web Servers\n\n")
		for _, tech := range stack.Servers {
			versionInfo := ""
			if tech.Version != "" {
				versionInfo = fmt.Sprintf(" (v%s)", tech.Version)
			}
			md.WriteString(fmt.Sprintf("- **%s**%s\n", tech.Name, versionInfo))
		}
		md.WriteString("\n")
	}

	// CDN
	if len(stack.CDN) > 0 {
		md.WriteString("### CDN & External Services\n\n")
		for _, tech := range stack.CDN {
			md.WriteString(fmt.Sprintf("- **%s**\n", tech.Name))
		}
		md.WriteString("\n")
	}

	// Analytics
	if len(stack.Analytics) > 0 {
		md.WriteString("### Analytics\n\n")
		for _, tech := range stack.Analytics {
			md.WriteString(fmt.Sprintf("- **%s**\n", tech.Name))
		}
		md.WriteString("\n")
	}
}

func writeInfrastructure(md *strings.Builder, infra *Infrastructure) {
	// Domain Info
	if infra.Registered != nil || infra.Expires != nil {
		md.WriteString("### Domain Information\n\n")

		if infra.Registered != nil {
			ageYears := int(time.Since(*infra.Registered).Hours() / 24 / 365)
			md.WriteString(fmt.Sprintf("- **Registered:** %s (%d years ago)\n", infra.Registered.Format("2006-01-02"), ageYears))
		}

		if infra.Expires != nil {
			daysUntil := int(time.Until(*infra.Expires).Hours() / 24)
			expiryWarning := ""
			if daysUntil < 30 {
				expiryWarning = " ⚠️ **EXPIRING SOON**"
			} else if daysUntil < 0 {
				expiryWarning = " 🚨 **EXPIRED**"
			}
			md.WriteString(fmt.Sprintf("- **Expires:** %s (in %d days)%s\n", infra.Expires.Format("2006-01-02"), daysUntil, expiryWarning))
		}

		if infra.LastChanged != nil {
			md.WriteString(fmt.Sprintf("- **Last Modified:** %s\n", infra.LastChanged.Format("2006-01-02")))
		}

		if infra.Registrar != "" {
			md.WriteString(fmt.Sprintf("- **Registrar:** %s\n", infra.Registrar))
		}

		md.WriteString("\n")
	}

	// Hosting
	if infra.HostingProvider != "" || infra.EmailProvider != "" {
		md.WriteString("### Hosting & Services\n\n")
		if infra.HostingProvider != "" {
			md.WriteString(fmt.Sprintf("- **Hosting Provider:** %s\n", infra.HostingProvider))
		}
		if infra.EmailProvider != "" {
			md.WriteString(fmt.Sprintf("- **Email Provider:** %s\n", infra.EmailProvider))
		}
		md.WriteString("\n")
	}

	// DNS
	if len(infra.Nameservers) > 0 {
		md.WriteString("### DNS Configuration\n\n")
		md.WriteString(fmt.Sprintf("**Nameservers:** (%d)\n\n", len(infra.Nameservers)))
		for _, ns := range infra.Nameservers {
			md.WriteString(fmt.Sprintf("- `%s`\n", ns))
		}
		md.WriteString("\n")
	}

	// IPs
	if len(infra.IPs) > 0 {
		md.WriteString(fmt.Sprintf("**IP Addresses:** (%d)\n\n", len(infra.IPs)))
		for _, ip := range infra.IPs {
			md.WriteString(fmt.Sprintf("- `%s` (%s)\n", ip.Address, ip.Type))
		}
		md.WriteString("\n")
	}

	// DNS Records
	if len(infra.DNSRecords) > 0 {
		md.WriteString("**DNS Records:**\n\n")
		for recordType, values := range infra.DNSRecords {
			md.WriteString(fmt.Sprintf("- **%s** (%d): ", recordType, len(values)))
			if len(values) <= 3 {
				md.WriteString(fmt.Sprintf("`%s`", strings.Join(values, "`, `")))
			} else {
				md.WriteString(fmt.Sprintf("`%s` ... and %d more", strings.Join(values[:3], "`, `"), len(values)-3))
			}
			md.WriteString("\n")
		}
		md.WriteString("\n")
	}
}

func writeAssetInventory(md *strings.Builder, assets *AssetInventory) {
	md.WriteString("### Domains & Subdomains\n\n")
	md.WriteString(fmt.Sprintf("- **Total Domains:** %d\n", assets.TotalDomains))

	// Calcular porcentaje, evitar división por cero
	percentage := 0.0
	if assets.TotalDomains > 0 {
		percentage = float64(assets.ActiveDomains) / float64(assets.TotalDomains) * 100
	}
	md.WriteString(fmt.Sprintf("- **Active Domains:** %d (%.1f%%)\n", assets.ActiveDomains, percentage))
	md.WriteString(fmt.Sprintf("- **Subdomains:** %d\n\n", assets.TotalSubdomains))

	md.WriteString("### Web Resources\n\n")
	md.WriteString(fmt.Sprintf("- **HTML Pages:** %d\n", assets.HTMLPages))
	md.WriteString(fmt.Sprintf("- **JavaScript Files:** %d\n", assets.JavaScripts))
	md.WriteString(fmt.Sprintf("- **Stylesheets:** %d\n", assets.Stylesheets))
	md.WriteString(fmt.Sprintf("- **Images:** %d\n", assets.Images))
	md.WriteString(fmt.Sprintf("- **Documents:** %d\n", assets.Documents))
	md.WriteString(fmt.Sprintf("- **Other Resources:** %d\n\n", assets.OtherResources))

	// APIs
	totalAPIs := len(assets.RestAPIs) + len(assets.GraphQLAPIs)
	if totalAPIs > 0 {
		md.WriteString("### API Endpoints\n\n")
		md.WriteString(fmt.Sprintf("- **REST APIs:** %d\n", len(assets.RestAPIs)))
		md.WriteString(fmt.Sprintf("- **GraphQL APIs:** %d\n\n", len(assets.GraphQLAPIs)))
	}

	// Certificates
	if assets.Certificates > 0 {
		md.WriteString(fmt.Sprintf("- **SSL/TLS Certificates:** %d\n\n", assets.Certificates))
	}
}

func writeSecurityFindings(md *strings.Builder, security *SecurityFindings) {
	md.WriteString(fmt.Sprintf("**Total Findings:** %d\n\n", security.TotalFindings))

	// Summary por severidad
	md.WriteString("| Severity | Count |\n")
	md.WriteString("|----------|-------|\n")
	md.WriteString(fmt.Sprintf("| 🔴 Critical | %d |\n", security.Critical))
	md.WriteString(fmt.Sprintf("| 🟠 High | %d |\n", security.High))
	md.WriteString(fmt.Sprintf("| 🟡 Medium | %d |\n", security.Medium))
	md.WriteString(fmt.Sprintf("| 🟢 Low | %d |\n\n", security.Low))

	// General Findings
	if len(security.Findings) > 0 {
		md.WriteString("### Findings\n\n")
		for _, finding := range security.Findings {
			severityEmoji := getRiskEmoji(finding.Severity)
			md.WriteString(fmt.Sprintf("#### %s %s [%s]\n\n", severityEmoji, finding.Title, finding.ID))
			md.WriteString(fmt.Sprintf("**Severity:** %s\n\n", strings.ToUpper(finding.Severity)))
			md.WriteString(fmt.Sprintf("%s\n\n", finding.Description))

			if finding.Location != "" {
				md.WriteString(fmt.Sprintf("**Location:** `%s`\n\n", finding.Location))
			}

			if len(finding.Evidence) > 0 {
				md.WriteString("**Evidence:**\n\n")
				for _, evidence := range finding.Evidence {
					md.WriteString(fmt.Sprintf("- `%s`\n", truncate(evidence, 80)))
				}
				md.WriteString("\n")
			}

			if finding.Remediation != "" {
				md.WriteString(fmt.Sprintf("**Remediation:** %s\n\n", finding.Remediation))
			}
		}
	}

	// GF Findings
	if len(security.GFFindings) > 0 {
		md.WriteString(fmt.Sprintf("### GoLinkFinder Patterns (%d)\n\n", len(security.GFFindings)))

		limit := 15
		if len(security.GFFindings) < limit {
			limit = len(security.GFFindings)
		}

		md.WriteString("| Resource | Evidence | Category | Severity |\n")
		md.WriteString("|----------|----------|----------|----------|\n")

		for i := 0; i < limit; i++ {
			gf := security.GFFindings[i]
			severityEmoji := getRiskEmoji(gf.Severity)
			md.WriteString(fmt.Sprintf("| `%s` | `%s` | %s | %s %s |\n",
				truncate(gf.Resource, 30),
				truncate(gf.Evidence, 30),
				gf.Category,
				severityEmoji,
				gf.Severity))
		}

		if len(security.GFFindings) > limit {
			md.WriteString(fmt.Sprintf("\n*... and %d more*\n", len(security.GFFindings)-limit))
		}
		md.WriteString("\n")
	}
}

func writeTimeline(md *strings.Builder, timeline []TimelineEvent) {
	md.WriteString("| Date | Event | Source |\n")
	md.WriteString("|------|-------|--------|\n")

	for _, event := range timeline {
		dateStr := event.Timestamp.Format("2006-01-02")
		emoji := ""
		switch event.Type {
		case "registration":
			emoji = "🎂"
		case "expiration":
			emoji = "⏰"
		case "change":
			emoji = "✏️"
		case "scan":
			emoji = "🔍"
		}

		md.WriteString(fmt.Sprintf("| %s | %s %s | %s |\n", dateStr, emoji, event.Description, event.Source))
	}
}

// Helper functions

func getRiskEmoji(risk string) string {
	switch strings.ToLower(risk) {
	case "critical":
		return "🔴"
	case "high":
		return "🟠"
	case "medium":
		return "🟡"
	case "low":
		return "🟢"
	default:
		return "⚪"
	}
}

func truncate(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
